<!-- Logo Default Colors -->
<li class="form-group">
  <div class="graphic-area hide-colors" id="sidebar-color">
    <% if logo_colors.present? %>
        <%- logo_colors.each_with_index do |val, index|%>
            <%#=render partial: "decorations/colors", locals: {color: val, number: index}%>
          <li class="form-group">
            <div class="graphic-area">
              <div class="color-selection">
                <div id="color_selection" class="color-box default-logo-color" style="background:<%= val %>;" data-logo-layer-id="<%= logo_layer_ids[index] %>"></div><%#=color.try(:colour_code)%>
                <div class="color-number">Color <%=index+1%></div>
                <div class="color-name">
                  <!-- Color will be here from Colors Table Later -->
                </div>
              </div>
            </div>
          </li>
      <%end%>
    <% else %>
      <p>No default colors present.</p>
    <% end %>
  </div>
</li>

<!-- Logo Default Colors -->
<div data-select-logo-layer></div>

<div data-style-logo-selected-attributes></div>

<!-- Logo Color Selection -->
<li class="form-group">
  <div class="graphic-area hide-sidebar" id="sidebar-5">
    <%=render partial: "decorations/color_selection", locals: { colors: colors, selected_colors: selected_colors }%>
  </div>
</li>

<!-- Sizes -->

<li class="form-group">
  <label>Sizes</label>
  <ul id="sizes">
    <% (1..3).each_with_index do |size, index| %>
        <li>
          <a href="#" class="select-size" data-max-size="50 "data-size="<%= logo_size[index] %>">Size-<%= size %></a>
        </li>
    <% end %>
  </ul>
</li>

<li class="form-group">
  <label>Mirror</label> |
  <input type="checkbox" value="0" id="mirror-view">
</li>

<li class="form-group">
  <label>Rotate</label>
  <div id="rotate-slider"></div>
</li>
<br />
<script>
  $( function() {
    var rangeSlider = document.getElementById('rotate-slider');
    slider = noUiSlider.create(rangeSlider, {
      start: [ 0 ],
      range: {
        'min': [  0 ],
        'max': [ 360 ]
      }
    });

    slider.on('change', function(e){
      if ($("#mirror-view").is(':checked')) {
        $("#mirror-view").val('0');
        $("#mirror-view").prop('checked', false);
        $("#mirror-view").change()
      }
      var styleSvg = $("#placed-svg-on-style"),
          viewBoxWidth = (styleSvg.prop('viewBox').animVal.width / 2),
          viewBoxHeight = (styleSvg.prop('viewBox').animVal.height / 2),
          styleSvgSelectedAttributes = $('[data-style-logo-selected-attributes]'),
          styleSvgRotationValue = "rotate("+ parseInt(e) +" "+ viewBoxWidth +" "+ viewBoxHeight +") ";

      // Rotate Nested SVG so rotate group attribute "g" instead of "svg"
      // for rotation from center we need to set svg viewBox width & height as the rotation x, y values
      // rotate(deg x y)
      styleSvg.find('g').attr(
          'transform',
          styleSvgRotationValue
      );

      styleSvgSelectedAttributes.attr('data-values', styleSvgRotationValue)
    });
  } );
</script>

<style>
  #sizes li a {
    height: auto;
    width: inherit;
    border: inherit;
  }

  #rotate-slider {
    padding: 0px 20px;
    margin: 12px 0px;
  }
</style>

